{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"tabl",
				"tableDieEvent"
			],
			[
				"offsetMil",
				"offsetMilliseconds"
			],
			[
				"UTC",
				"UTCMilliseconds"
			],
			[
				"off",
				"offsetMilliseconds"
			],
			[
				"mic",
				"micros"
			],
			[
				"di",
				"dieSize"
			]
		]
	},
	"buffers":
	[
		{
			"file": "CloudApp_Imp_Dice_MMA8452Q_Agent.nut",
			"settings":
			{
				"buffer_size": 3429,
				"line_ending": "Windows"
			}
		},
		{
			"file": "CloudApp_Imp_Soda_Agent.nut",
			"settings":
			{
				"buffer_size": 4121,
				"line_ending": "Windows"
			}
		},
		{
			"file": "ThingApp_Imp_Soda_Device.nut",
			"settings":
			{
				"buffer_size": 4811,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 4 files for \"[^.]log\\(\" (regex)\n\n/Users/duppy/Documents/GitHub/ElectricDice_ThingApp/ElectricImp_Dice/CloudApp_Imp_Soda_Agent.nut:\n  103  \n  104  ////////////////////////////////////////////////////////\n  105: // first Agent code starts here\n  106: log(\"Imp Agent URL : \" + http.agenturl())\n  107: log(\"Agent SW version : \" + imp.getsoftwareversion())\n  108: log(\"Thingstream Root : \" + tsRoot)\n  109: log(\"fbParamsString: \" + fbParamsString)\n  110: const versionString = \"Remeber The Soda v00.01.2013-08-22a\"\n  111: log(\"Ready for events.  Version : \" + versionString)\n  112  \n  113  // No more code to execute so we'll wait for messages from Device\n\n/Users/duppy/Documents/GitHub/ElectricDice_ThingApp/ElectricImp_Dice/ThingApp_Imp_Dice_MMA8452Q_Device.nut:\n  442      pollMMA8452QBusy = true // mark as busy\n  443      if (hardware.pin1.read() == 1) { // only react to low to high edge\n  444: //FIXME:  do we need to check status for data ready in all xyz?//log(format(\"STATUS == 0x%02x\", readReg(STATUS)))\n  445          reg = readReg(INT_SOURCE)\n  446          while (reg != 0x00) {\n  ...\n  506  // no in and out []s anymore, using Agent messages\n  507  \n  508: // Send status to know we are alive\n  509: log(\"BOOTING  \" + versionString + \" \" + hardware.getimpeeid() + \"/\" + imp.getmacaddress())\n  510: log(\"imp software version : \" + imp.getsoftwareversion())\n  511  \n  512  // roll every time we boot just for some debug status\n  ...\n  519  while(lastUTCSeconds == time()) {\n  520  }\n  521: offsetMilliseconds = hardware.millis() % 1000\n  522: log(\"offsetMilliseconds = \" + offsetMilliseconds)\n  523: log(timestamp(),40)\n  524: \n  525: log(format(\"lastUTCSeconds = %013u\", lastUTCSeconds))\n  526: //log(format(\"lastUTCSeconds = %013u\", lastUTCSeconds * 1000.0))\n  527: \n  528: log(\"powersave = \" + imp.getpowersave())\n  529  // Configure pin1 for wakeup.  Connect MMA8452Q INT2 pin to imp pin1.\n  530  hardware.pin1.configure(DIGITAL_IN_WAKEUP, pollMMA8452Q)\n\n/Users/duppy/Documents/GitHub/ElectricDice_ThingApp/ElectricImp_Dice/ThingApp_Imp_Soda_Device.nut:\n  103  // no in and out []s anymore, using Agent messages\n  104  \n  105: // Send status to know we are alive\n  106: log(\"BOOTING  \" + versionString + \" \" + hardware.getimpeeid() + \"/\" + imp.getmacaddress())\n  107: log(\"imp software version : \" + imp.getsoftwareversion())\n  108  \n  109  // BUGBUG: below needed until newer firmware!?  See http://forums.electricimp.com/discussion/comment/4875#Comment_2714\n  ...\n  113  while(lastUTCSeconds == time()) {\n  114  }\n  115: offsetMilliseconds = hardware.millis() % 1000\n  116: log(\"offsetMilliseconds = \" + offsetMilliseconds)\n  117: \n  118: log(\"powersave = \" + imp.getpowersave())\n  119  // Configure pin1 for wakeup.  Connect MMA8452Q INT2 pin to imp pin1.\n  120  hardware.pin1.configure(DIGITAL_IN_WAKEUP, wakeup)\n\n17 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 2866,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 67.0,
		"selected_items":
		[
			[
				"inspac",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/duppy/Documents/GitHub/ElectricDice_ThingApp/ElectricImp_Dice/Sample_MMA8452Q_Device.nut",
		"/Users/duppy/Dropbox/TechShop/Cloud Dice/3Dprint/case0bin.jsCAD.js",
		"/Users/duppy/Documents/GitHub/ElectricDice_ThingApp/ElectricImp_Dice/CloudApp_Imp_Dice_MMA8452Q_Agent.nut",
		"/Users/duppy/Documents/GitHub/ElectricDice_ThingApp/ElectricImp_Dice/ThingApp_Imp_Dice_MMA8452Q_Device.nut",
		"/Users/duppy/Documents/GitHub/ElectricDice_ThingApp/ElectricImp_Dice/electricdice-all-metadata-export.json",
		"/Users/duppy/Documents/GitHub/ElectricDice_ThingApp/ElectricImp_Dice/CloudApp_Imp_Dice_rules.json",
		"/Users/duppy/Documents/GitHub/ElectricDice_ThingApp/ElectricImp_Dice/CloudApp_Imp_Dice_MMA8452Q.Agent..nut",
		"/C/Users/duppy/Dropbox/Apps/site44/www.interfacearts.com/fireview/index.html",
		"/C/Users/duppy/Dropbox/Apps/site44/www.interfacearts.com/index.html",
		"/C/Users/duppy/Dropbox/Apps/site44/fireview.interfacearts.com/index (Duppy Proctor's conflicted copy 2013-05-03).html",
		"/C/Users/duppy/Dropbox/TechShop/Cloud Dice/WebApp/ElectricDice_WebApp_Demo/d3.js.index.html",
		"/C/Users/duppy/Dropbox/TechShop/CoCo/TIworkspace/CoCo-ThingApp-DVT/CoCo BlueGiga/CoCo.bgs",
		"/C/Users/duppy/Dropbox/TechShop/Cloud Dice/WebApp/ElectricDice_WebApp_Demo/electricdice-fb-d3.js",
		"/C/Users/duppy/Documents/GitHub/senstream-firmware/mobilemuse_arduino/mobilemuse_arduino.ino",
		"/C/Users/duppy/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/duppy/AppData/Roaming/Sublime Text 2/Packages/Squirrel/Squirrel.tmLanguage",
		"/C/Users/duppy/Dropbox/TechShop/Cloud Dice/ThingApp/ElectricDice-ThingApp-Proxy-Processing/ElectricDice_ThingApp/ElectricImp_Dice/CloudApp_Imp_Dice_MMA8452Q.Agent..nut",
		"/C/Users/duppy/Dropbox/TechShop/Cloud Dice/ThingApp/ElectricDice-ThingApp-Proxy-Processing/ElectricDice_ThingApp/ElectricImp_Dice/ThingApp_Imp_Dice_MMA8452Q_Device.nut",
		"/C/Users/duppy/AppData/Roaming/Sublime Text 2/Packages/User/Plain text.sublime-settings",
		"/C/Users/duppy/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/C/Users/duppy/Dropbox/TechShop/Cloud Dice/WebApp/ElectricDice_WebApp_Demo/ex-bootstratp.html"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"CTRL_REG4",
			"CTRL_REG1",
			"CTRL_REG2",
			"server.log",
			"fbRoot",
			"server.log",
			"tsRoot",
			"fbUuid",
			"fbRoot",
			"log(",
			"[^.]log\\(",
			"[^.]error\\(",
			"[~.]error\\(",
			"^error\\(",
			"^error(",
			" error(",
			" log(",
			", [0-9]+\\)",
			"log(",
			"impAgentURLRoot",
			"agent.send",
			"send",
			"firebaseURLParamsTable",
			"firebaseURLRoot",
			"firebaseURLParamsString",
			"firebaseUUID",
			"tableDieEvent",
			"fakeMillis",
			"mapImpeeID_DieID",
			"firebaseURLParamsTable",
			"firebaseURLParamsString",
			"uuid",
			"fbUuidPrefix",
			"firebaseUUID",
			"firebaseURLRoot",
			"auth",
			"emRthqxr7UVV6Jw4SeEI9G65GA0CUXpfVN3eBoGO",
			"firebaseURLParamsTable",
			"firebaseURLParamsString",
			"ubidots",
			"getVBatt",
			"firebaseURLParamsString",
			"firebaseURLParamsTable",
			"readSequentialRegs",
			"uuid",
			"checkActivity",
			"initMMA8452Q",
			"fakeMillis",
			"agent.send",
			"getVBatt",
			"complete",
			"timestamp",
			"send",
			"timestamp",
			"firebaseUUID",
			"timestamp",
			"offsetMilliseconds",
			"agent",
			"date",
			"millis",
			"ubi",
			"offsetMilliseconds",
			"estimate",
			"estimatedUTCMilliseconds",
			"es",
			"estimatedUTCMilliseconds",
			"local",
			"data-by-session",
			": {: {",
			": {",
			"\" :",
			"maxG",
			"fullScale"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			" server.error(",
			" server.log(",
			"\\)"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "CloudApp_Imp_Dice_MMA8452Q_Agent.nut",
					"settings":
					{
						"buffer_size": 3429,
						"regions":
						{
						},
						"selection":
						[
							[
								1150,
								1150
							]
						],
						"settings":
						{
							"syntax": "Packages/Squirrel/Squirrel.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "CloudApp_Imp_Soda_Agent.nut",
					"settings":
					{
						"buffer_size": 4121,
						"regions":
						{
						},
						"selection":
						[
							[
								3652,
								3652
							]
						],
						"settings":
						{
							"syntax": "Packages/Squirrel/Squirrel.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "ThingApp_Imp_Soda_Device.nut",
					"settings":
					{
						"buffer_size": 4811,
						"regions":
						{
						},
						"selection":
						[
							[
								1101,
								1101
							]
						],
						"settings":
						{
							"rulers":
							[
								80
							],
							"syntax": "Packages/Squirrel/Squirrel.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"word_wrap": true,
							"wrap_width": 80
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"settings":
					{
						"buffer_size": 2866,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										251,
										256
									],
									[
										258,
										263
									],
									[
										300,
										305
									],
									[
										307,
										312
									],
									[
										361,
										366
									],
									[
										368,
										373
									],
									[
										404,
										409
									],
									[
										411,
										416
									],
									[
										519,
										524
									],
									[
										526,
										531
									],
									[
										970,
										975
									],
									[
										1212,
										1217
									],
									[
										1219,
										1224
									],
									[
										1310,
										1315
									],
									[
										1317,
										1322
									],
									[
										1553,
										1558
									],
									[
										1560,
										1565
									],
									[
										1610,
										1615
									],
									[
										1617,
										1622
									],
									[
										1645,
										1650
									],
									[
										1652,
										1657
									],
									[
										1715,
										1720
									],
									[
										1786,
										1791
									],
									[
										1793,
										1798
									],
									[
										2184,
										2189
									],
									[
										2191,
										2196
									],
									[
										2282,
										2287
									],
									[
										2289,
										2294
									],
									[
										2590,
										2595
									],
									[
										2597,
										2602
									],
									[
										2655,
										2660
									],
									[
										2662,
										2667
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								261,
								261
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.494444444444,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.unsaved_changes":
	{
		"height": 404.0
	},
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/C/Users/duppy/Documents/GitHub/senstream-firmware/Schematics/schematics-senstream.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 297.0,
	"status_bar_visible": true
}
